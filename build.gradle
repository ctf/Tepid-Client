group 'ca.mcgill.science.ctf.tepid'
version '1.4.0'

buildscript {

    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }


    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN"
        classpath "ca.mcgill.tepid-commons:gradle-plugin:$TEPID_COMMONS"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'

apply plugin: 'ca.mcgill.science.tepid.commons'


sourceCompatibility = JVM_TARGET
targetCompatibility = JVM_TARGET



ext {
    // can be passed with -Ptepid_config_dir=CONFIG_DIR, or set in an environment variable "tepid_config_dir
    if (! project.hasProperty('tepid_config_dir')){
        tepid_config_dir = "$System.env.tepid_config_dir"
    }
    if (! project.hasProperty('tepid_config_dir')){
        throw new GradleException('tepid_config_dir not found')
    }
}

buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
        jcenter()
        maven { url "https://www.jitpack.io" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN"
        classpath "ca.mcgill.tepid-commons:gradle-plugin:$TEPID_COMMONS"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "config"
        }
    }
}


repositories {
    mavenCentral()
    maven { url "https://www.jitpack.io" }
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.github.cpicon92:Q:ccb4d8fb9d'

    compile tepidDependency.kotlin
    compile tepidDependency.rxJava

    testCompile tepidDependency.junit
    testCompile tepidDependency.kotlinTest
    testCompile "ca.mcgill.tepid-commons:test:$TEPID_COMMONS"

    compile "ca.mcgill.tepid-commons:retrofit:$TEPID_COMMONS"
    compile "ca.mcgill.tepid-commons:models:$TEPID_COMMONS"
    compile "ca.mcgill.tepid-commons:utils:$TEPID_COMMONS"

    compile "com.bugsnag:bugsnag:3.+"

    // https://mvnrepository.com/artifact/com.dorkbox/SystemTray
    compile group: 'com.dorkbox', name: 'SystemTray', version: '3.12'

//    compile group: 'org.apache.commons', name: 'commons-email', version: '1.4'

    compile group: 'org.tukaani', name: 'xz', version: '1.8'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.27'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.27'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.27'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"


}

task copyConfigs(type: Copy) {
    from "$tepid_config_dir/LDAP.properties", "$tepid_config_dir/URL.properties", "$tepid_config_dir/creationInformation.properties", "$tepid_config_dir/printing.properties"
    into "config"
}

task copyBuilder(type: Copy) {
    into "$buildDir/libs"
    from "files"
}

task copyLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task copyLibsLibs(type: Copy) {
    into "$buildDir/libs/libs"
    from configurations.runtime
}

task commandLinux(type: Exec) {
    workingDir "$buildDir/libs"
    commandLine "java", "-classpath", "./*", "ca.mcgill.science.tepid.client.Main"
}

jar {
    from('config') {
        include '*.properties'
    }
    baseName = 'tepid'
    manifest {
        attributes 'Main-Class': 'ca.mcgill.science.tepid.client.Main'
        attributes 'Class-Path': './*'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    dependsOn cleanTest
    testLogging.showStandardStreams = true
}

task tepidWindows(type: GradleBuild) {
    tasks = ['copyBuilder', 'copyLibsLibs', 'copyConfigs', 'jar']
}

task tepidLinux(type: GradleBuild) {
    tasks = ['copyLibs', 'copyConfigs', 'jar']
}

task msi() {
	dependsOn "tepidWindows"
//    probably C:\Program Files (x86)\WiX Toolset v3.11
    def WIX = System.getenv ( 'WIX' )
    def working_dir = "$buildDir/libs"
    Map<String, Object> env = ["PRODUCTVERSION" : version, "WIX" : WIX]

    doLast {
        if (WIX) {
            if (version == '') {
                throw new GradleException('Version is blank')
            }
            exec {
                workingDir working_dir
                environment env
                environment "WIX", WIX
                commandLine "cmd", "/c", "\"%WIX%\"\\bin\\heat dir libs -ag -dr dir_libs -suid -cg libsDir -sreg -out libsDir.wxs"
            }

            exec {
                workingDir working_dir
                environment env
                environment "WIX", WIX
                commandLine "cmd", "/c", "\"%WIX%\"\\bin\\candle -arch x64 libsDir.wxs"
            }
            exec {
                workingDir working_dir
                environment env
                environment "WIX", WIX
                commandLine "cmd", "/c", "\"%WIX%\"\\bin\\candle installer.wxs"
            }
            exec {
                workingDir working_dir
                environment env
                environment "WIX", WIX
                commandLine "cmd", "/c", "\"%WIX%\"\\bin\\light -ext WixUIExtension -cultures:en-us installer.wixobj libsDir.wixobj -b libs -out TEPID-%PRODUCTVERSION%.msi"
            }
            exec {
                workingDir working_dir
                environment env
                environment "WIX", WIX
                commandLine "cmd", "/c", "del installer.wixobj libsDir.wixObj libsDir.wxs TEPID-%PRODUCTVERSION%.wixpdb"
                println('Done')
            }
        } else {
            throw new GradleException('WIX is not installed and added to path')
        }
    }
    group 'build'
}

task run(dependsOn: 'copyConfigs', type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "ca.mcgill.science.tepid.client.Main"
}